[comment]{
Generell todo: hyperrefs om vi vill at A1, A2, A3 ord ska länka
}

# Evaluation
[label](chp:evaluation)
The primary objective of the project is to design and implement a markup language
that is well-suited for both note-taking and academic writing.
As evidenced by the fact that the text you are currently reading has been written
in the ModMark language (and transcompiled into [latex]()), significant progress
towards achieving this goal has been made. 

The successful compilation of this bachelor thesis demonstrates that the ModMark
compiler is functioning as intended, and that the language itself is expressive
and powerful. Nonetheless, it is important to acknowledge that both the design
and implementation of ModMark are not without their shortcomings. The remainder
of this chapter will investigate to which extent the design ideals outlined in
Section [reference](sec:aim) were realised. 

## Expressiveness (A1)
[link "Aim A1"] aim:A1 is to make ModMark expressive enough to bridge the gap between lightweight
languages and powerful typesetting systems like [latex](). We also stated that the
language should be output agnostic. While the former is more subjective, the latter
is a core property of the compiler presented in Chapter [reference](chp:implementation). 

The majority of ModMark's expressiveness comes from its packages and modules. It
relies on these to provide functionality that is necessary to produce the desired
document. The set of packages that is included in the standard bundle of ModMark
goes a long way in enabling most kinds of writing. As was presented in Section
[reference](sec:packages), they support figures, tables, and even a standalone bibliography
and citation system. This is adequate for most parts of a typical academic report.
However, the standard packages may not be enough when conforming to certain report standards.
Sections such as cover page and title page are more cumbersome to reproduce in ModMark
without specialised packages.

To write our thesis in ModMark we needed to create a //chalmers-thesis// package. It is
responsible for creating [latex]() chapters and the pages that precede the table of contents.
While the need for such a package can be seen as a shortcoming, it also demonstrates that the
core concepts of ModMark are working. It shows that it is possible to extend the language with
new functionality if needed. Granted, the extendability of the language only becomes a positive
factor once there is a healthy ecosystem of packages.

Furthermore, part of our goals towards expressiveness was to make ModMark agnostic
of output format. In Chapter [reference](chp:implementation), we presented the design and
implementation of a compiler that achieves this. Additionally, both the CLI and web
playground were designed to be output agnostic, by allowing the user to specify the
output format. Although, because HTML and [latex]() were prioritised in development
they were also given additional functionality (see Section [reference]{sec:cli} and
[reference]{sec:playground}). In that sense, while the compiler is truly output agnostic,
the full ModMark suite is not. 

The decision to make ModMark output agnostic has served us well in development. It eased
the process of extending and fine tuning the output for both HTML and [latex](). Because the
support for these was written exclusively as packages, the process should translate well
to adding support for other formats. In practise, a package that provides fundamental support
for a new format is relatively small in size and complexity and thus it is possible for
individual users to add new output formats.  

## Simplicity and syntax (A2)
Another aim [link "A2"]aim:A2 in designing ModMark is simplicity. The language is intended to offer
an ergonomic lightweight syntax and also be easier to understand in comparison to
more full featured typesetting systems such as [latex]() and Typst.

Simplicity is highly subjective and very hard to evaluate in an objective manner.
However, since ModMark aims to strike a balance between the simplicity of Markdown
and the expressiveness of [latex]() we will offer a non-exhaustive comparison of
syntax and features for common writing tasks in the three languages[note]{Note that there are many dialects of Markdown that offer different features, such as GitHub flavoured Markdown, John Grubers original Perl script and Pandoc Markdown. This comparison will use the CommonMark specification [cite](Commonmark).}. 

##### Headings
Headings in ModMark are very similar to Markdown with some subtle differences.
No whitespace character after the hash sign is needed like in Markdown and the
alternate syntax that uses equal signs or hyphens is not supported.
See Figure [reference]{fig:headings} for a comparison.

[fancy-image
    alt="A table comparing the syntax for headings in ModMark, Markdown and LaTeX."
    caption="Comparing the syntax for headings."
    label="fig:headings"
]
./figures/headings_evaluation.svg

##### Styling text
ModMark follows Markdown's convention of using non-alphanumerical characters as
tags to surround text that should be displayed in another format such as
``**bold**`` or ``//italic//``. See Figure [reference]{fig:tags} for a full 
comparison. 

Using tags results in a shorter and less obtrusive syntax in comparison to
[latex]() (with the exception of math mode). Since ModMark includes many more
tags than Markdown, expressing other styling options such as superscript and
math also leads to a shorter syntax since Markdown requires the use of HTML for
expressing those concepts. 

A potential downside of ModMark's approach is that the list of characters with
special behaviour that users need to know about gets larger than for instance
[latex]() where, almost, everything in text mode follows the convention of an
command prefixed with a backslash. It is also possible to argue that ModMark
is needlessly verbose by always requiring four characters for tags but it helps
to avoid confusion or ambiguity in situations with nested tags or prefixes
(``**__a__**example``), which most Markdown implementations simply do not support.


[fancy-image
    alt = "A table comparing the syntax for common inline text formatting options in ModMark, Markdown and LaTeX."
    caption="Comparing the syntax for common inline text formatting options. Notice that HTML is used for the situations where Markdown does not provide any concrete syntax."
    label="fig:tags"
]
./figures/tags_evaluation.svg


##### Modules
Markdown has no syntax for user-provided features and only offer concrete syntax
for a few more common elements such as images and links. [latex]() and ModMark
on the other hand has a syntax that may be used for any arbitrary feature:
``\\commands[]{}`` and ``\[modules]``. It is debatable if ModMarks modules are
easier to understand than the [tex]() macro system. Although ModMark has some
potential benefits when it comes to auto generated documentation and editor integration.

The syntax for multi-line modules in ModMark is also shorter than the
environments (``\\begin{something}``) found in [latex](). But ModMark has its own
flaws, since modules always consume content verbatim and then later can choose to
handle nested structures examples such as this may confuse users:

[comment](TODO ugly multiline verbatim)
[comment](TODO förklara exemplet lite mer)

[code txt theme="github"]((
[center]
[code]{
Some code

This will not be part of the code block since
'center' has no delimiter
}
))

## Portability and package development (A3)
[label](sec:a3eval)
One of the central ideas of ModMark is portability; a document written on one
computer should still produce the same result if compiled on another computer,
regardless of what packages are used. [link A3] aim:A3 formulates this as
a concrete requirement, the same aim also states that the solution should offer
package developers a lot of flexibility. At the core of our solution for
A3 is the Wasmer WebAssembly runtime. It supports the major
operating systems: Linux, Windows and macOS and also the most common web browsers.
There were also recent improvements to their chipset support. Version 3.2 of Wasmer
added RISC-V to the list of chipsets that is supported by both Cranelift and LLVM,
which now consists of x86_64, arm64, x86 and RISC-V. To that extent, the portability
of ModMark is sufficient for the goal that was set.

There is also the aspect of being accessible and convenient for developers who
wish to extend the language, which is an essential criterion for the growth of
the ModMark ecosystem. Development of the standard modules (all written in Rust)
was relatively straightforward. However, Rust may not be a good benchmark for the
typical experience of package development, since it works well with both WebAssembly
and Wasmer and there are well established libraries for string serialisation (including JSON support). 

A handful of the popular programming languages can be compiled into WebAssembly,
although most do not have the same first class support that Rust does. A hurdle
for all other languages is the requirement of compatibility with both Wasmer and
the WebAssembly System Interface. 

To better evaluate this goal we have successfully implemented packages in Rust,
Swift, C, C++, Go (more specifically the TinyGo dialect), AssemblyScript
(a sub-set of Typescript), and Zig. Source code for some of these packages are
referenced in Sec. [reference]{sec:furtherreading}. We have also made unsuccessful
attempts at implementing a package using the Haskell Glasgow Compiler, but their
support is currently only a tech preview that is incompatible with Wasmer [cite]{ghc}.

To add even more nuance to the issue of supporting multiple languages, there is
also a matter of performance. If users were to develop packages in languages
such as Python and JavaScript, it could slow down the ModMark compiler significantly.
This is because higher-level languages need to include a larger runtime, introducing
a large performance overhead and size. However, recent developments may remedy this
issue. There is an active proposal for WebAssembly to add support for built-in garbage
collection [cite]{wasm}. It includes a handful of features to reduce the size and
increase the efficiency for use of high-level languages that use garbage collection,
Javascript and Python included.

There are some noteworthy downsides to using WebAssembly too. WASM and WASI are
yet to allow functions that return more complex data types. Subsequently, the API
for manipulating the element tree is at risk of being cumbersome to use in comparison
to an embedded language with free access to the element tree. Although, this problem
can arguably be solved by providing bindings that convert the input provided by ModMark's
WASI API into an easier-to-use API suited for a particular language.

When comparing the portability to other languages, ModMark appears as a good option
nonetheless. Systems like [tex](), [latex](), and Typst solve the issue of portability by having
a fully Turing complete language that lets developers write packages directly in
the document language itself. Another common approach is embedding a scripting language
such as Lua that is used to create extensions. A notable downside to these approaches
is that developers are restricted to a domain specific language they might not be
familiar with. Moreover, they do not have access to the rich ecosystem of libraries
that is often present in a general purpose programming languages and have to manually
implement every feature themselves.

## Accessibility
Wang, Cachola, Bragg, //et al.// [cite](accessibility) discuss how PDFs are not 
accessible to everyone and have
poor support for screen readers. They present a possible solution to this problem
with a system that converts PDFs to more accessible HTML documents. While this is
a good option a report written in ModMark could be converted directly to both a
PDF and an accessible HTML document if there is proper package support for it.

As PDFs do not have much support for accessibility it is difficult to accommodate
everyone when generating [latex](). However, when generating HTML there are a lot
of things that can be done to assist people with disabilities or other barriers.
ModMark attempts to generate semantic HTML to give as much information as possible
about the different parts of the documents. For example ``<figure>`` tags are
used for images and plots. ``<table>`` is used for tables. Paragraphs are also
wrapped in ``<p>`` tags. The ``files`` package that is responsible for
converting images will also give a compiler warning if no alt-text is given when
converting to HTML.
